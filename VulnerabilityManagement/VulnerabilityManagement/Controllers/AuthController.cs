using Microsoft.AspNetCore.Mvc;
using Microsoft.IdentityModel.Tokens;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
using VulnerabilityManagement.Data;
using VulnerabilityManagement.Models;

namespace VulnerabilityManagement.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class AuthController : ControllerBase
    {
        private readonly AppDbContext _context;
        private readonly IConfiguration _configuration;

        public AuthController(AppDbContext context, IConfiguration configuration)
        {
            _context = context;
            _configuration = configuration;
        }

        // Kullanıcı Kaydı (Register)
        [HttpPost("register")]
        public IActionResult Register(User user)
        {
            if (_context.Users.Any(u => u.Username == user.Username))
            {
                return BadRequest("Bu kullanıcı zaten mevcut.");
            }

            _context.Users.Add(user);
            _context.SaveChanges();

            return Ok("Kullanıcı kaydı başarıyla yapıldı.");
        }

        // Kullanıcı Girişi (Login)
        [HttpPost("login")]
        public IActionResult Login(User loginUser)
        {
            var user = _context.Users.FirstOrDefault(u => u.Username == loginUser.Username && u.Password == loginUser.Password);

            if (user == null)
            {
                return Unauthorized("Kullanıcı adı veya şifre yanlış.");
            }

            var token = GenerateJwtToken(user);
            return Ok(new { Token = token });
        }

        // JWT Token Üretimi
        private string GenerateJwtToken(User user)
        {
            var tokenHandler = new JwtSecurityTokenHandler();

            // "Jwt:Key" yapılandırmasının null veya boş olmadığını kontrol edin
            var key = _configuration["Jwt:Key"];
            if (string.IsNullOrEmpty(key))
            {
                throw new ArgumentNullException("Jwt:Key yapılandırması bulunamadı.");
            }

            // Anahtarı byte dizisine dönüştür
            var encodedKey = Encoding.UTF8.GetBytes(key);

            // Token açıklayıcıyı oluştur
            var tokenDescriptor = new SecurityTokenDescriptor
            {
                Subject = new ClaimsIdentity(new[]
                {
            new Claim(ClaimTypes.Name, user.Username)
        }),
                Expires = DateTime.UtcNow.AddHours(1),
                SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(encodedKey), SecurityAlgorithms.HmacSha256Signature),
                Issuer = _configuration["Jwt:Issuer"],
                Audience = _configuration["Jwt:Audience"]
            };

            // Token oluştur ve geri döndür
            var token = tokenHandler.CreateToken(tokenDescriptor);
            return tokenHandler.WriteToken(token);
        }
    }
}
