using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.IdentityModel.Tokens;
using System.Text;
using VulnerabilityManagement.Data; // AppDbContext için doðru namespace'i ekleyin

var builder = WebApplication.CreateBuilder(args);

// Docker için Kestrel yapýlandýrmasý
builder.WebHost.ConfigureKestrel(options =>
{
    options.ListenAnyIP(8080); // Docker konteyneri için port
});

// PostgreSQL baðlantýsýný ekle
builder.Services.AddDbContext<AppDbContext>(options =>
    options.UseNpgsql(builder.Configuration.GetConnectionString("DefaultConnection")));

// Jwt Key kontrolü (null veya boþ kontrolü)
var key = builder.Configuration["Jwt:Key"];
if (string.IsNullOrEmpty(key))
{
    throw new ArgumentNullException("Jwt:Key yapýlandýrmasý bulunamadý. Lütfen appsettings.json dosyasýný kontrol edin.");
}

var encodedKey = Encoding.UTF8.GetBytes(key);

// JWT Authentication Ayarlarý
builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
    .AddJwtBearer(options =>
    {
        options.TokenValidationParameters = new TokenValidationParameters
        {
            ValidateIssuer = true,
            ValidateAudience = true,
            ValidateLifetime = true,
            ValidateIssuerSigningKey = true,
            ValidIssuer = builder.Configuration["Jwt:Issuer"],
            ValidAudience = builder.Configuration["Jwt:Audience"],
            IssuerSigningKey = new SymmetricSecurityKey(encodedKey)
        };
    });

builder.Services.AddControllers();
// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();

app.UseAuthentication(); // JWT Authentication middleware
app.UseAuthorization();

app.MapControllers();

app.Run();
